{#
    @see https://html.spec.whatwg.org/multipage/parsing.html#attribute-name-state
#}
{% import 'tokenizer/_macros.php.twig' as h -%}

if ({{ h.is_whitespace() }} || $cc === '/' || $cc === '>' || {{ h.is_eof() }}) {
    // Reconsume in the after attribute name state.
    {{ h.reconsume_in('AFTER_ATTRIBUTE_NAME') }}
} elseif ($cc === '=') {
    // Switch to the before attribute value state.
    {{ h.advance_to('BEFORE_ATTRIBUTE_VALUE') }}
} elseif ($cc === "\0") {
    // TODO: This is an unexpected-null-character parse error.
    // Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's name.
    {{ h.append_to_attr_name('"\\u{FFFD}"') }}
    {{ h.consume('ATTRIBUTE_NAME') }}
} elseif ({{ cc_in('"', "'", '<') }}) {
    // TODO: This is an unexpected-character-in-attribute-name parse error.
    // Treat it as per the "anything else" entry below.
    {{ h.append_to_attr_name('$cc') }}
    {{ h.consume('ATTRIBUTE_NAME') }}
} else {
    // Append the current input character to the current attribute's name.
    $chars = $this->charsUntil("=<>/'\"\0 \n\t\f");
    {{ h.append_to_attr_name('strtolower($chars)') }}
    {{ h.update_and_reconsume_in('ATTRIBUTE_NAME') }}
}
{# TODO:
    When the user agent leaves the attribute name state (and before emitting the tag token, if appropriate),
    the complete attribute's name must be compared to the other attributes on the same token;
    if there is already an attribute on the token with the exact same name,
    then this is a duplicate-attribute parse error and the new attribute must be removed from the token.

    If an attribute is so removed from a token, it, and the value that gets associated with it, if any,
    are never subsequently used by the parser, and are therefore effectively discarded.
    Removing the attribute in this way does not change its status as the "current attribute"
    for the purposes of the tokenizer, however.
#}
