{#
    @see https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
#}
{% import 'tokenizer/_macros.php.twig' as h -%}

// Consume the maximum number of characters possible,
// with the consumed characters matching one of the identifiers of the named character references table (in a case-sensitive manner).
// Append each character to the temporary buffer when it's consumed.
$entity = null;
$pos = $this->position;
$node = $this->entitySearch;
// Consume characters and compare these to a substring of the entity names until the substring no longer matches.
while(true) {
    $c = $this->input[$pos] ?? null;
    if ($c === null) break;
    if (!isset($node->children[$c])) break;
    $node = $node->children[$c];
    $this->temporaryBuffer .= $c;
    $pos++;
}
// At this point we have a string that starts with some characters that may match an entity
// Try to find the longest entity the string will match to take care of &noti for instance.
$node = $this->entitySearch;
$lastTerminalIndex = null;
for ($i = 1; $i < strlen($this->temporaryBuffer); $i++) {
    $c = $this->temporaryBuffer[$i];
    if (!isset($node->children[$c])) break;
    $node = $node->children[$c];
    if ($node->value) $lastTerminalIndex = $i;
}
if ($lastTerminalIndex !== null) {
    $entity = substr($this->temporaryBuffer, 1, $lastTerminalIndex);
    $this->position += strlen($entity);
}
if ($entity !== null) {
    if (
        // If the character reference was consumed as part of an attribute,
        {{ h.is_attribute_return_state() }}
        // and the last character matched is not a U+003B SEMICOLON character (;),
        && $this->temporaryBuffer[-1] === ';'
        // and the next input character is either a U+003D EQUALS SIGN character (=) or an ASCII alphanumeric,
        && 1 === strspn($this->input, '='.Characters::ALNUM, $this->position + 1, 1)
    ) {
        // then, for historical reasons, flush code points consumed as a character reference
        $this->flushCodePointsConsumedAsACharacterReference();
        // and switch to the return state.
        {{ h.reconsume_in_return_state() }}
    } else {
        // Otherwise:
        // 1. If the last character matched is not a U+003B SEMICOLON character (;),
        if ($this->temporaryBuffer[-1] !== ';') {
            // TODO: this is a missing-semicolon-after-character-reference parse error.
        }
        // 2. Set the temporary buffer to the empty string. Append the decoded character reference to the temporary buffer.
        $this->temporaryBuffer = EntityLookup::NAMED_ENTITIES[$entity];
        // 3. Flush code points consumed as a character reference.
        $this->flushCodePointsConsumedAsACharacterReference();
        // Switch to the return state.
        {{ h.reconsume_in_return_state() }}
    }
} else {
    // Flush code points consumed as a character reference.
    $this->flushCodePointsConsumedAsACharacterReference();
    // Switch to the ambiguous ampersand state.
    {{ h.switch_to('AMBIGUOUS_AMPERSAND') }}
}
