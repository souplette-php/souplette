{#
    @see https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state
#}
{% import 'tokenizer/_macros.php.twig' as h -%}

if (0 === substr_compare($this->input, '--', $this->position, 2)) {
    // Consume those two characters
    $this->position += 2;
    // create a comment token whose data is the empty string,
    $this->currentToken = new Comment('');
    // and switch to the comment start state.
    {{ h.update_and_reconsume_in('COMMENT_START') }}
} elseif (0 === substr_compare($this->input, 'DOCTYPE', $this->position, 7, true)) {
    // Consume those characters
    $this->position += 7;
    // and switch to the DOCTYPE state.
    {{ h.update_and_reconsume_in('DOCTYPE') }}
} elseif (0 === substr_compare($this->input, '[CDATA[', $this->position, 7, true)) {
    // Consume those characters.
    $this->position += 7;
    {{ h.update_cc() }}
    if (false) {
        // TODO: If there is an adjusted current node and it is not an element in the HTML namespace,
        // https://html.spec.whatwg.org/multipage/parsing.html#adjusted-current-node
        // then switch to the CDATA section state.
        {{ h.reconsume_in('CDATA_SECTION') }}
    } else {
        // this is a cdata-in-html-content parse error.
        {{ h.parse_error('CDATA_IN_HTML_CONTENT') }}
        // Create a comment token whose data is the "[CDATA[" string.
        $this->currentToken = new Comment('[CDATA[');
        // Switch to the bogus comment state.
        {{ h.reconsume_in('BOGUS_COMMENT') }}
    }
} else {
    // This is an incorrectly-opened-comment parse error.
    {{ h.parse_error('INCORRECTLY_OPENED_COMMENT') }}
    // Create a comment token whose data is the empty string.
    $this->currentToken = new Comment('');
    // Switch to the bogus comment state (don't consume anything in the current state).
    {{ h.reconsume_in('BOGUS_COMMENT') }}
}
