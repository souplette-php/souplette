{% macro is_eof() -%}
$cc === null
{%- endmacro %}

{% macro is_whitespace() -%}
{{- cc_in(' ', "\n", "\t", "\f") -}}
{%- endmacro %}

{% macro is_alpha() -%}
ctype_alpha($cc)
{%- endmacro %}

{% macro chars_until(bytes, return_var = 'chars') -%}
$l = strcspn($this->input, {{ bytes|repr_bytes }}, $this->position);
${{ return_var }} = substr($this->input, $this->position, $l);
$this->position += $l;
{%- endmacro %}

{% macro chars_while(bytes, return_var = 'chars') -%}
$l = strspn($this->input, {{ bytes|repr_bytes }}, $this->position);
${{ return_var }} = substr($this->input, $this->position, $l);
$this->position += $l;
{%- endmacro %}

{% macro chars_while_alpha(return_var = 'chars') -%}
{{ _self.chars_while(constant('ju1ius\\HtmlParser\\Tokenizer\\Characters::ALPHA'), return_var) }}
{%- endmacro %}

{% macro chars_while_numeric(return_var = 'chars') -%}
{{ _self.chars_while(constant('ju1ius\\HtmlParser\\Tokenizer\\Characters::NUM'), return_var) }}
{%- endmacro %}

{% macro chars_while_hex(return_var = 'chars') -%}
{{ _self.chars_while(constant('ju1ius\\HtmlParser\\Tokenizer\\Characters::HEX'), return_var) }}
{%- endmacro %}

{% macro peek_value(value, case_insensitive = false) -%}
0 === substr_compare($this->input, {{ value }}, $this->position, {{ value|length }}, {{ case_insensitive }})
{% endmacro %}

{% macro set_return_state(state_name) -%}
$this->returnState = TokenizerStates::{{ state_name }};
{%- endmacro %}

{% macro is_attribute_return_state() -%}
$this->returnState === TokenizerStates::ATTRIBUTE_VALUE_DOUBLE_QUOTED || $this->returnState === TokenizerStates::ATTRIBUTE_VALUE_SINGLE_QUOTED || $this->returnState === TokenizerStates::ATTRIBUTE_VALUE_UNQUOTED
{%- endmacro %}

{% macro start_attribute(name = "''", value = "''") -%}
$this->currentToken->attributes[] = [{{ name }}, {{ value }}];
{%- endmacro %}

{% macro append_to_attr_name(value) -%}
$this->currentToken->attributes[count($this->currentToken->attributes) - 1][0] .= {{ value }};
{%- endmacro %}

{% macro append_to_attr_value(value) -%}
$this->currentToken->attributes[count($this->currentToken->attributes) - 1][1] .= {{ value }};
{%- endmacro %}

{% macro update_cc() -%}
$cc = $this->input[$this->position] ?? null;
{%- endmacro %}

{% macro update_and_reconsume_in(state_name) -%}
{{ _self.update_cc() }}
{{ _self.reconsume_in(state_name) }}
{%- endmacro %}

{#
    We use this macro when the spec says "reconsume the current input character in the <mumble> state."
#}
{% macro reconsume_in(state_name) -%}
$this->state = TokenizerStates::{{ state_name }};
goto {{ state_name }};
{%- endmacro reconsume_in %}

{% macro reconsume_in_return_state() -%}
$this->state = $this->returnState;
goto INITIAL;
{%- endmacro %}

{#
    We use this macro when the spec says "consume the next input character ... and switch to the <mumble> state."
#}
{% macro advance_to(state_name) -%}
$this->state = TokenizerStates::{{ state_name }};
$cc = $this->input[++$this->position] ?? null;
goto {{ state_name }};
{%- endmacro advance_to %}

{#
    We use this macro when the spec says "consume the next input character" and it doesn't say "switch to ... state".
#}
{% macro consume(state_name) -%}
$cc = $this->input[++$this->position] ?? null;
goto {{ state_name }};
{%- endmacro consume %}

{#
    Sometimes there's more complicated logic in the spec that separates when we consume the next input character
    and when we switch to a particular state.
    We handle those cases by advancing the source directly and using this macro to switch to the indicated state.
#}
{% macro switch_to(state_name) -%}
$this->state = TokenizerStates::{{ state_name }};
$cc = $this->input[++$this->position] ?? null;
goto {{ state_name }};
{%- endmacro switch_to %}

{% macro emit_current_token() -%}
$this->tokenQueue->enqueue($this->currentToken);
{%- endmacro %}

{% macro emit_and_resume_in(state_name) -%}
$this->emitCurrentToken();
$this->state = TokenizerStates::{{ state_name }};
++$this->position;
return true;
{%- endmacro emit_and_resume_in %}

{% macro emit_eof() -%}
return false;
{%- endmacro %}

{% macro flush_and_advance_to(state_name) -%}
do {
    $this->state = TokenizerStates::{{ state_name }};
    goto {{ state_name }};
} while (false);
{%- endmacro flush_and_advance_to %}
